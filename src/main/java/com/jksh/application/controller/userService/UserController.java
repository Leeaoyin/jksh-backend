package com.jksh.application.controller.userService;import com.jksh.application.common.annotation.CurrentUser;import com.jksh.application.common.enums.HttpCodeEnum;import com.jksh.application.common.model.Page;import com.jksh.application.common.model.QueryParam;import com.jksh.application.common.param.dto.UserEntrienceDTO;import com.jksh.application.common.param.dto.VerifyUserDTO;import com.jksh.application.common.param.result.ResponseResult;import com.jksh.application.common.param.vo.UserVO;import com.jksh.application.common.param.vo.VerifyVO;import com.jksh.application.controller.BaseController;import com.jksh.domain.event.Const;import com.jksh.domain.service.UserService;import com.jksh.infrastructure.repository.po.RhSysUser;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.web.bind.annotation.*;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import javax.validation.Valid;@RestController@RequestMapping(value = Const.API_URL + "/user")public class UserController extends BaseController {        Logger logger = LoggerFactory.getLogger(UserController.class);        @Resource    UserService userService;    /**     * 登陆接口     * @param userEntrienceDTO      * @return     */    @PostMapping(value =  "/login")    public ResponseResult<UserVO> login(@RequestBody @Valid UserEntrienceDTO userEntrienceDTO, HttpServletRequest request){        RhSysUser rhSysUser = userService.userLogin(userEntrienceDTO);        if(!hasUserActive(rhSysUser)){            return ResponseResult.error(HttpCodeEnum.FORBIDDEN);        }        String ip = getClientIpAddress(request);        logger.info("用户[{}]进行登陆，IP[{}]", rhSysUser.getAccount(), ip);        return  ResponseResult.success(UserVO                .builder()                .account(rhSysUser.getAccount())                .user_type(rhSysUser.getUserType())                .token(tokenUtils.generateToken(rhSysUser.getAccount(),rhSysUser.getPassword())).build());    }    /**     * 注册接口     * @param userEntrienceDTO 包含account , password , user_type     * @return     */    @PostMapping(value = "/register")    public ResponseResult<VerifyVO> register(@RequestBody @Valid UserEntrienceDTO userEntrienceDTO){        Boolean register = userService.userRegist(userEntrienceDTO);        return ResponseResult.success(VerifyVO.builder().success(register).build());    }    /**     * 分页获取未被删除的普通用户列表（不包含管理员）     * @param pageSize     * @param pageNumber     * @return     */    @GetMapping(value = "/list")    public ResponseResult<Page> getAllGeneralUsers(@RequestParam("page_size") Integer pageSize,                                                   @RequestParam("page_num") Integer pageNumber){        return ResponseResult.success(userService.getAllGeneralUser(QueryParam.builder()                .page_size(pageSize)                .page_num(pageNumber)                .build())        );    }    /**     * 由管理员审核用户     * @param user     * @param verifyUserDTO     * @return     */    @PostMapping(value = "/verify")    public ResponseResult<VerifyVO> verifyUser(@CurrentUser RhSysUser user,                                               @RequestBody @Valid VerifyUserDTO verifyUserDTO){        Integer userId = verifyUserDTO.getUser_id();        Integer operation = verifyUserDTO.getOperation();        return ResponseResult.success(VerifyVO.builder().success(userService.verifyUser(user, userId, operation)).build());    }        /**     * get ip address in the http request     *     * @param request http servlet request     * @return client ip address     */    public static String getClientIpAddress(HttpServletRequest request) {        String clientIp = request.getHeader("X-Forwarded-For");        if (StringUtils.isNotEmpty(clientIp) && !clientIp.equalsIgnoreCase("unKnown")) {            int index = clientIp.indexOf(",");            if (index != -1) {                return clientIp.substring(0, index);            } else {                return clientIp;            }        }        clientIp = request.getHeader("X-Real-IP");        if (StringUtils.isNotEmpty(clientIp) && !clientIp.equalsIgnoreCase("unKnown")) {            return clientIp;        }        return request.getRemoteAddr();    }                        }