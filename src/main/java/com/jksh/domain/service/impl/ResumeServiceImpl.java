package com.jksh.domain.service.impl;import com.jksh.application.common.enums.HttpCodeEnum;import com.jksh.application.common.exception.ServerException;import com.jksh.application.common.model.Page;import com.jksh.application.common.model.QueryConditionForResume;import com.jksh.application.common.model.QueryParam;import com.jksh.application.common.param.dto.ResumeDTO;import com.jksh.application.common.param.vo.ResumeVO;import com.jksh.application.handle.ResumeHandler;import com.jksh.domain.service.ResumeService;import com.jksh.infrastructure.repository.mapper.RhResumeMapper;import com.jksh.infrastructure.repository.po.RhResume;import com.jksh.infrastructure.repository.po.RhSysUser;import com.jksh.infrastructure.utils.CosUtils;import com.jksh.infrastructure.utils.Md5Utils;import org.apache.commons.collections4.CollectionUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.multipart.MultipartFile;import tk.mybatis.mapper.entity.Example;import javax.annotation.Resource;import java.io.File;import java.io.IOException;import java.util.Date;import java.util.List;import java.util.Optional;import java.util.stream.Collectors;@Servicepublic class ResumeServiceImpl implements ResumeService {        private static final Logger logger = LoggerFactory.getLogger(ResumeServiceImpl.class);        @Resource    CosUtils cosUtils;        @Resource    RhResumeMapper rhResumeMapper;        @Override    @Transactional(rollbackFor = {RuntimeException.class})    public Boolean createResume(Integer userId, ResumeDTO resumeDTO) {        if (isExits("phone",resumeDTO.getPhone())){            throw new ServerException(HttpCodeEnum.SERVER_ERROR.getCode(), "手机号已存在");        }        RhResume rhResume = ResumeHandler.convertDTO2PO(resumeDTO);        rhResume.setUpdateUser(userId);        rhResume.setUpdateTime(new Date());        rhResume.setStatus(1);        return rhResumeMapper.updateByPrimaryKeySelective(rhResume) > 0;    }    @Override    public ResumeVO uploadFile(RhSysUser user, MultipartFile file) {        File resume = null;        if (Optional.ofNullable(file).isPresent()){            try {                String originalFilename = file.getOriginalFilename();                String[] filename = originalFilename.split("\\.");                resume = File.createTempFile(filename[0], "."+filename[1]);                file.transferTo(resume);            } catch (IOException e) {                throw new ServerException(HttpCodeEnum.SERVER_ERROR.getCode(),"文件转换失败");            }            String uploadFile = cosUtils.uploadFile(resume);            String md5HashCodeToString = Md5Utils.md5HashCodeToString(resume);            Integer resumeID = insertResumeOnlyFile(user.getId(), uploadFile, md5HashCodeToString);            deleteFile(resume);            logger.info("{} : upload successful", file.getOriginalFilename());            return ResumeVO.builder().id(resumeID).cos_of_resume(uploadFile).build();        }        throw new ServerException(HttpCodeEnum.SERVER_ERROR.getCode(), "文件为空！");    }    @Override    public Boolean updateResume(Integer userId, ResumeDTO resumeDTO) {        return null;    }    @Override    public Boolean deleteResume(Integer userId, Integer resumeId) {        return null;    }    @Override    public Page queryPageOfResume(RhSysUser user,QueryParam queryParam, QueryConditionForResume queryConditionForResume) {        List<RhResume> rhResumeList = rhResumeMapper.getPagePositionByCondition(queryConditionForResume);        List<ResumeVO> collect = rhResumeList.stream().map(e -> ResumeHandler.convertPO2VO(e)).collect(Collectors.toList());        return Page.builder()                .Date(collect)                .PageInfo(queryParam, rhResumeMapper.getCountByCondition(queryConditionForResume))                .build();    }        private Integer insertResumeOnlyFile(Integer userId, String uploadFile, String md5HashCodeToString) {        RhResume rhResume = new RhResume();        rhResume.setCosOfResume(uploadFile);        rhResume.setResumeFileCode(md5HashCodeToString);        rhResume.setStatus(0);        rhResume.setCreateUser(userId);        rhResume.setCreateTime(new Date());        rhResumeMapper.insertSelective(rhResume);        Example example = new Example(RhResume.class);        example.createCriteria().andEqualTo("createTime", rhResume.getCreateTime());        return rhResumeMapper.selectOneByExample(example).getId();    }        private List<RhResume> getAll() {        Example example = new Example(RhResume.class);        example.createCriteria().andEqualTo("status",1);        return rhResumeMapper.selectByExample(example);    }            private Boolean isExits(String field, String value) {        Example example = new Example(RhResume.class);        example.createCriteria().andEqualTo(field, value);        return CollectionUtils.isNotEmpty(rhResumeMapper.selectByExample(example));    }    private void deleteFile(File... files) {        if(Optional.ofNullable(files).isPresent()) {            for (File file : files) {                if (file.exists()) {                    file.delete();                }            }        }    }}