package com.jksh.domain.service.impl;import com.jksh.application.common.model.Page;import com.jksh.application.common.model.QueryConditionForPosition;import com.jksh.application.common.model.QueryParam;import com.jksh.application.common.param.dto.PositionDTO;import com.jksh.application.common.param.vo.PositionVO;import com.jksh.application.handle.PositionHandler;import com.jksh.domain.service.PositionService;import com.jksh.infrastructure.repository.mapper.RelUserPositionOrderMapper;import com.jksh.infrastructure.repository.mapper.RhPositionMapper;import com.jksh.infrastructure.repository.po.RhPosition;import com.jksh.infrastructure.repository.po.RhSysUser;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import tk.mybatis.mapper.entity.Example;import javax.annotation.Resource;import java.util.*;import java.util.stream.Collectors;@Servicepublic class PositionServiceImpl implements PositionService {        @Resource    RhPositionMapper rhPositionMapper;    @Resource    RelUserPositionOrderMapper relUserPositionOrderMapper;        @Override    @Transactional(rollbackFor = {RuntimeException.class})    public Boolean createPosition(Integer userId, PositionDTO positionDTO) {        RhPosition rhPosition = PositionHandler.convertDTO2PO(positionDTO);        rhPosition.setCreateTime(new Date());        rhPosition.setCreateUserId(userId);        return rhPositionMapper.insertSelective(rhPosition) > 0;    }    @Override    @Transactional    public Boolean deletePositionById(RhSysUser user, Integer id) {        return null;    }    @Override    public Boolean updatePositionById(RhSysUser user, PositionDTO positionDTO) {        return null;    }    @Override    public Page getAllPositions(QueryParam queryParam, QueryConditionForPosition queryConditionForPosition) {        List<RhPosition> rhPositionList = rhPositionMapper.getPagePositionByCondition(queryConditionForPosition);        List<PositionVO> collect = rhPositionList.stream().map(e -> PositionHandler.convertPO2VO(e)).collect(Collectors.toList());        return Page.builder()                .Date(collect)                .PageInfo(queryParam, rhPositionMapper.getCountByCondition(queryConditionForPosition))                .build();    }        @Override    public PositionVO getPositionById(Integer positionId) {        Example example = new Example(RhPosition.class);        example.createCriteria().andEqualTo("id", positionId);        return PositionHandler.convertPO2VO(rhPositionMapper.selectOneByExample(example));    }    private List<RhPosition> searchAllByField(String field, String value){        Example example = new Example(RhPosition.class);        example.createCriteria().andLike(field,"%"+ value + "%");        return rhPositionMapper.selectByExample(example);    }}