package com.jksh.domain.service.impl;import com.jksh.application.common.enums.HttpCodeEnum;import com.jksh.application.common.exception.ServerException;import com.jksh.application.common.model.Page;import com.jksh.application.common.model.QueryParam;import com.jksh.application.common.param.dto.UserEntrienceDTO;import com.jksh.application.common.param.vo.UserVO;import com.jksh.application.handle.UserHandler;import com.jksh.domain.service.UserService;import com.jksh.infrastructure.repository.mapper.RhSysUserMapper;import com.jksh.infrastructure.repository.po.RhSysUser;import lombok.extern.slf4j.Slf4j;import org.apache.commons.collections4.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.mindrot.jbcrypt.BCrypt;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import tk.mybatis.mapper.entity.Example;import javax.annotation.Resource;import java.util.*;import java.util.stream.Collectors;import static com.jksh.application.controller.BaseController.systemMap;@Service@Slf4jpublic class UserServiceImpl implements UserService {        @Resource    RhSysUserMapper rhSysUserMapper;            @Override    @Transactional(rollbackFor = {Exception.class})    public Boolean userRegist(UserEntrienceDTO userEntrienceDTO) {        String username = userEntrienceDTO.getAccount();        String password = userEntrienceDTO.getPassword();        if (isExist(username)){            log.info("The username({}) has been registered", username);            throw new ServerException(HttpCodeEnum.SERVER_ERROR.getCode(), "此账号已被注册");        }        RhSysUser rhSysUser = UserHandler.convertDTO2PO(userEntrienceDTO);        rhSysUser.setPassword(BCrypt.hashpw(password,BCrypt.gensalt()));        rhSysUser.setCreateTime(new Date());        rhSysUser.setStatus("0");        return rhSysUserMapper.insertSelective(rhSysUser) > 0;    }    @Override    public RhSysUser userLogin(UserEntrienceDTO userEntrienceDTO) {        systemMap.clear();        String username = userEntrienceDTO.getAccount();        String password = userEntrienceDTO.getPassword();        RhSysUser user = getByUsername(username);        if (Objects.isNull(user)) {throw new ServerException(HttpCodeEnum.SERVER_ERROR.getCode(), "账号不存在");}        if (Optional.of(user).isPresent()){            if (StringUtils.equals(user.getStatus(),"0")){                throw new ServerException(HttpCodeEnum.SERVER_ERROR.getCode(), "账号未激活，请联系管理员");            }            boolean checkpw = false;            try {                checkpw = BCrypt.checkpw(password, user.getPassword());            } catch (Exception e) {            }            if (checkpw) {                return user;            }            log.info("Username({}) password is wrong", username);            throw new ServerException(HttpCodeEnum.SERVER_ERROR.getCode(), "用户名或密码错误");        }        return user;    }    @Override    public Boolean verifyUser(RhSysUser currentUser, Integer userId, Integer operation) {        Example example = new Example(RhSysUser.class);        example.createCriteria().andEqualTo("id", userId);        RhSysUser user = new RhSysUser();        user.setStatus(String.valueOf(operation));        return rhSysUserMapper.updateByExampleSelective(user, example) > 0;    }    @Override    public RhSysUser getByUsername(String username) {        RhSysUser rhSysUser = null;        if (Optional.of(username).isPresent()){            Example example = new Example(RhSysUser.class);            example.createCriteria().andEqualTo("account", username);            rhSysUser = rhSysUserMapper.selectOneByExample(example);        }        return rhSysUser;    }    @Override    public Boolean isExist(String username) {        Example example = new Example(RhSysUser.class);        example.createCriteria().andEqualTo("account", username);//        //        Example example = Example.builder(RhSysUser.class)//                .select("")//                .where(Sqls.custom().andEqualTo("account", username))//                .build();                        return rhSysUserMapper.selectCountByExample(example) > 0;    }    @Override    public Page getAllGeneralUser(QueryParam queryParam) {         List<RhSysUser> rhSysUserList = rhSysUserMapper.getGeneralUsers((queryParam.getPage_num()-1)* queryParam.getPage_size(), queryParam.getPage_size());        List<UserVO> collect = rhSysUserList.stream().map(e -> UserHandler.convertPO2VO(e)).collect(Collectors.toList());        return Page.builder()                .Date(collect)                .PageInfo(queryParam, selectAll())                .build();    }        public List<RhSysUser> selectAll(){        Example example = new Example(RhSysUser.class);        example.createCriteria().andEqualTo("userType","1")                .andEqualTo("isDeleted",0);        return rhSysUserMapper.selectByExample(example);    }   }