package com.letgee.application.controller.positionService;import com.letgee.application.common.annotation.CurrentUser;import com.letgee.application.common.enums.HttpCodeEnum;import com.letgee.application.common.model.Page;import com.letgee.application.common.model.QueryConditionForPosition;import com.letgee.application.common.model.QueryParam;import com.letgee.application.common.param.dto.BindDTO;import com.letgee.application.common.param.dto.OrderDTO;import com.letgee.application.common.param.dto.PositionConditionDTO;import com.letgee.application.common.param.dto.PositionDTO;import com.letgee.application.common.param.result.ResponseResult;import com.letgee.application.common.param.vo.PositionVO;import com.letgee.application.common.param.vo.VerifyVO;import com.letgee.application.controller.BaseController;import com.letgee.domain.event.Const;import com.letgee.domain.service.PositionOrderService;import com.letgee.domain.service.PositionService;import com.letgee.infrastructure.repository.po.RhSysUser;import com.letgee.infrastructure.utils.JsonUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.web.bind.annotation.*;import javax.annotation.Resource;import javax.validation.Valid;@RestController@RequestMapping(value = Const.API_URL + "/position")public class PositionController extends BaseController {        Logger logger = LoggerFactory.getLogger(PositionController.class);        @Resource    PositionService positionService;        @Resource    PositionOrderService positionOrderService;    /**     * 创建职位     * @param positionDTO     * @param rhSysUser     * @return     */    @PostMapping(value = "/create")    public ResponseResult<VerifyVO> addPosition(@RequestBody @Valid PositionDTO positionDTO,                                                @CurrentUser RhSysUser rhSysUser){        Boolean result = positionService.createPosition(rhSysUser.getId(), positionDTO);        if (result){            logger.info("{} : create position {} successfully !", rhSysUser.getAccount(), positionDTO.getPosition_name());            return ResponseResult.success(VerifyVO.builder().success(result).build());        }        return ResponseResult.error(HttpCodeEnum.SERVER_ERROR);    }    @PostMapping(value = "/list")    public ResponseResult<Page> getPositionListByPost(@RequestBody @Valid PositionConditionDTO positionConditionDTO){        QueryParam queryParam = QueryParam.builder()                .page_size(positionConditionDTO.getPage_size())                .page_num(positionConditionDTO.getPage_num())                .build();        QueryConditionForPosition queryConditionForPosition = QueryConditionForPosition.QueryConditionBuilder.QueryConditionBuilder()                .withCity(positionConditionDTO.getCity())                .withFunctional(positionConditionDTO.getFunctional())                .withIndustry(positionConditionDTO.getIndustry())                .withExperience(positionConditionDTO.getExperience())                .withTag(positionConditionDTO.getTag())                .withOffset((queryParam.getPage_num()-1)* queryParam.getPage_size())                .withPageSize(queryParam.getPage_size())                .withKeyWord(positionConditionDTO.getKey_word())                .build();        return ResponseResult.success(positionService.getAllPositions(queryParam, queryConditionForPosition)        );    }    /**     * 当前用户收所发布的职位（接单）     * @param user     * @param orderDTO     * @return     */    @PostMapping(value = "/take")    public ResponseResult<VerifyVO> takeOrders(@CurrentUser RhSysUser user,                                               @RequestBody @Valid OrderDTO orderDTO){        Boolean result = positionOrderService.takeOrderByUser(user, orderDTO.getPosition_id());        if (result){            logger.info("{} : take order {} successfully!", user.getAccount(), orderDTO.getPosition_id());            return ResponseResult.success(VerifyVO.builder().success(result).build());        }        return ResponseResult.error(HttpCodeEnum.SERVER_ERROR);    }        /**     * 根据 id 获取职位信息     * @param id     * @return     */    @GetMapping("/get")    public ResponseResult<PositionVO> getPositionById(@RequestParam("id") Integer id){        return ResponseResult.success(positionService.getPositionById(id));    }    /**     * 职位绑定简历，生成订单     * @return     */    @PostMapping("/bind")    public ResponseResult<VerifyVO> relPositionResume(@CurrentUser RhSysUser user, @RequestBody BindDTO bindDTO){        Boolean result = positionOrderService.bindResume(user, bindDTO);        if (result){            logger.info("{} : bind resume{} to position{} successfully!", user.getAccount(), JsonUtils.parse(bindDTO.getRes_ids()), bindDTO.getPos_id());            return ResponseResult.success(VerifyVO.builder().success(result).build());        }        return ResponseResult.error(HttpCodeEnum.SERVER_ERROR);    }}